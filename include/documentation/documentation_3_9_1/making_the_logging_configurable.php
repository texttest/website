<div class="Text_Main_Header">Making the logging configurable</div>
<div class="Text_Description">integration with log frameworks
gram
	behaviour with TextTest</div>


<div class="Text_Normal"><BR>
</div>
				
				
<div class="Text_Header">Introduction</div>
<div class="Text_Normal">It is naturally possible to conduct all your logging for
TextTest by writing just to standard output. However, there are
drawbacks to doing this. 
</div>

<OL>
	<div class="Text_Normal"><li>It isn't possible to have some log statements present
	for some tests and absent for others.</div>
	<div class="Text_Normal"><li>Where logs cannot be easily disabled, they can slow down
	the system in production. 
	</div>
	<div class="Text_Normal"><li>You are compelled to log at one level only: it isn't
	possible to separate high-level domain-relevant logs from
	lower-level debug logs that will only be understood by the
	developers.</div>
</OL>
<div class="Text_Normal">Logging frameworks exist to solve these problems. TextTest
aims to handle their configuration smoothely and seamlessly to
make it easy to use them in your program when testing it.</div>
<div class="Text_Normal">We recommend you look at the log4x family of tools, for
example <A class="Text_Link" href="http://logging.apache.org/log4j/docs/">log4j</A>

(Java) <A class="Text_Link" href="http://www.its4you.at/english/log4py.html">log4py</A>
(Python) and <A class="Text_Link" href="http://log4cpp.sourceforge.net/">log4cpp</A>
(C++). However, it should be possible to plug in a wide variety
of logging frameworks, provided they support the features that
TextTest assumes, as described below.</div>
<div class="Text_Header"><A NAME="diagnostics"></A><A NAME="-trace"></A>Telling
TextTest about the SUT's logging framework</div>
<div class="Text_Normal">This is done via the config file dictionary entry
&ldquo;diagnostics&rdquo;.</div>

<div class="Text_Normal">The simplest form of logging you can have is a single number
to determine the &ldquo;log level&rdquo;, so that you can have
more or less logging in the same file. This is done by providing
the entry &ldquo;trace_level_variable&rdquo; in the
&ldquo;diagnostics&rdquo; dictionary. This provides the name of
an environment variable understood by the SUT to determine this
level. It can then be configured via &ldquo;-trace&rdquo; on the
command line, or by filling in the static GUI entry &ldquo;Target
application trace level&rdquo;.</div>
<div class="Text_Normal">This is a bit limited, though, not least because it is
usually hard to judge what effect setting the log level to 5 is
going to have. The log4x frameworks are somewhat more
sophisticated, in aiming to separate the concept of a &ldquo;logger&rdquo;

from what files (if any) it will write to. You can then have
multiple loggers present (named in an informative way) and they
can then be controlled via the logging framework's configuration
file: aimed at different files, the same files or disabled
without any need for re-compilation of the SUT.</div>
<div class="Text_Normal">To use such a logging framework with TextTest, you should
make the target files of all loggers write to a single directory
controlled by some environment variable (or property in the case
of Java and log4j). The name of this environment variable or
property should then be put in the config file in the entry
&ldquo;write_directory_variable&rdquo; of the &ldquo;diagnostics&rdquo;
dictionary. This means that TextTest can easily redirect them to
its own temporary directory and pick them up without trouble.</div>
<div class="Text_Normal">You should also configure the SUT to look for the logging
framework's configuration file via some environment variable.
You can then provide the name of this variable in the entry
&ldquo;configuration_file_variable&rdquo; of the &ldquo;diagnostics&rdquo;

dictionary. Note: this behaviour was different in TextTest 3.8
and earlier, see the equivalent documentation there for details.</div>
<div class="Text_Normal">Java programs (hence log4j) are a special case because they
have their own environment mechanism, meaning they are generally
controlled from properties files rather than environment
variables. Here &ldquo;configuration_file_variable&rdquo; and
&ldquo;write_directory_variable&rdquo; should instead be Java
properties, read from some intermediate properties file. The
name of this properties file needs to be provided in the entry
&ldquo;properties_file&rdquo; of the &ldquo;diagnostics&rdquo;
dictionary: it will then be auto-generated by TextTest in the
current working directory of the test.</div>

<div class="Text_Small_Header">Example configuration (log4py)</div> 
<div class="Text_Normal">Assumes the SUT
locates the log4py configuration file in the directory
determined by $DIAG_INPUT_FILE, and all its files are written to
the directory $DIAG_OUTPUT.</div>
<div class="Text_Normal">

<PRE>
[diagnostics]
configuration_file_variable:DIAG_INPUT
write_directory_variable:DIAG_OUTPUT
</PRE>

</div>
<div class="Text_Small_Header">Example 2 (log4j)</div>
<div class="Text_Normal"> Assumes the SUT reads the local
properties file log4jconf.properties, which will contain the two
properties &ldquo;diag_input&rdquo; and &ldquo;diag_output&rdquo;.
These in turn will be used to determine where to read the actual
log4j properties file and all files will be written to the
directory determined by the &ldquo;diag_output&rdquo; property.</div>

<div class="Text_Normal">

<PRE>
[diagnostics]
configuration_file_variable:diag_input
write_directory_variable:diag_output
properties_file:log4jconf
</PRE>

</div>
<div class="Text_Header">
Configuring the logging in your test suite
</div>
<div class="Text_Normal">You simply name your logging framework configuration file
&ldquo;logging.&lt;app&gt;&rdquo; and place it anywhere in the
directory structure of the test suite (see the <A class="Text_Link" href="<?php print "index.php?page=".$version."&n=about_testsuites"; ?>">guide
to TextTest's files and directories</A>). This will cause that
logging configuration to apply by default to all tests under
that point in the hierarchy. You will generally want to place at
least one such file, at the top level, as a default &ldquo;testing
configuration&rdquo; for the logs. Others can then be created
using the &ldquo;New File&rdquo; tab of the static GUI, at
appropriate places. Any log enabled by default should write to a
file with the same extension as the application, relative to the
write_directory_variable as above. It will then be automatically
picked up and compared by each test.</div>

<div class="Text_Normal">When TextTest comes to run the tests, on finding a logging
setup in the config file as above, it will start at the test
suite directory looking for a log framework configuration file.
If it doesn't find one, it will look in the parent test suite,
and repeat until it reaches the top of the hierarchy. If it
still doesn't find one, no configuration file will be read.</div>
<div class="Text_Normal">Note that &ldquo;temporary diagnostic mode&rdquo; from
TextTest 3.8 and earlier has been removed. For more details,
read the migration notes from the help menu.</div>