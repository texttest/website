<div class="Text_Main_Header">TextTest file formats</div>
<div class="Text_Description">Reference for the various files used by TextTest</div>
<div class="Text_Header">Overview</div>
<div class="Text_Normal">There are 3 kinds of files which are expected to be hand-edited
by the user. These all have slightly different formats which are documented in full here.
These are <I>config files</I>, <I>environment files</I> and <I>options files</I>. A fourth file
type, <I>testsuite files</I>, are auto-generated by the static GUI but are also possible to
manipulate by hand and hence are also documented here.
</div>
<div class="Text_Header">The Config File</div>
<div class="Text_Normal">This consists of a series of pre-defined
entries which tell TextTest how to run your application and how to interpret
its results. Its purpose is documented more fully <A class="Text_Link" href="<?php print "index.php?page=".$version."&n=about_testsuites"; ?>#executable">here</A>.</div>
<div class="Text_Normal">
The full list of these entries is dependent on your configuration module, 
and is documented here in the form of tables for the <A class="Text_Link" href="<?php print "index.php?page=".$version."&n=configfile_default"; ?>">default</A> and <A class="Text_Link" href="<?php print "index.php?page=".$version."&n=configfile_queuesystem"; ?>">queuesystem</A> configurations, as well as the <A class="Text_Link" href="<?php print "index.php?page=".$version."&n=personalpreffile"; ?>">personal config file</A>. These list what <i>type</I> the various entries have, which affects how they appear in the file.</div>
<div class="Text_Normal">
Blank lines and lines beginning with '#' will be ignored, the latter being interpreted as comments. Environment variables of the form $VAR or ${VAR} will be expanded, using both the environment set externally and the environment set by TextTest. (These variables are also documented in tables for the <A class="Text_Link" href="<?php print "index.php?page=".$version."&n=environment_default"; ?>">default</A> and <A class="Text_Link" href="<?php print "index.php?page=".$version."&n=environment_queuesystem"; ?>">queuesystem</A> configurations.)</div>
<div class="Text_Normal">
The basic format is "&lt;key&gt;:&lt;value&gt;" for ordinary entries. For example
the entry "executable" has type "String", while the entry "lines_of_text_difference" has type "Int". These entries can therefore be entered like this:
<?php codeSampleBegin() ?>
# Full path to my application
executable:/the/path/to/my/application.sh

# How long do we want our diff previews to be?
lines_of_text_difference:100
<?php codeSampleEnd() ?>
</div>
<div class="Text_Header">List Entries in Config Files</div>
<div class="Text_Normal">Some entries are lists, which in all cases implicitly means
a list of strings. This is achieved by adding several entries for the same &lt;key&gt;, repeating
the key each time. For example the entry "copy_test_path" has type "List", so we can configure it like this:
<?php codeSampleBegin() ?>
# We have several different data file types!
copy_test_path:my_data_file1.txt
copy_test_path:my_data_file2
copy_test_path:another_data_path.dat
<?php codeSampleEnd() ?>
</div>
<div class="Text_Normal">When writing versioned files that override settings in
a parent config file, special syntax is needed to remove entries from such a list entry
(Ints and Strings can just be set to some harmless value or back to the default again).
To remove one of the above entries again, we can e.g. add
<?php codeSampleBegin() ?>
# This version doesn't like .txt files
copy_test_path:{CLEAR my_data_file1.txt}
<?php codeSampleEnd() ?>
We can also remove the entire list and start again.
<?php codeSampleBegin() ?>
# This version uses completely different data files
copy_test_path:{CLEAR LIST}
copy_test_path:versioned_data_file1
copy_test_path:versioned_data_file2
<?php codeSampleEnd() ?>
</div>
<div class="Text_Header">Dictionary Entries in Config Files</div>
<div class="Text_Normal">Some entries are dictionaries, and hence are listed
as "Dictionary" or "CompositeDictionary", with the type of the values indicated in brackets.
The keys have different meanings, sometimes they also have predefined possible values,
in which case such values will be listed in the default value. Sometimes they will refer to
e.g. particular result file in the test tree. The specific documentation for these entries
should describe this.</div>
<div class="Text_Normal">
These entries make use of a "section header"-style format. For example "window_size" (in the
<A class="Text_Link" href="<?php print "index.php?page=".$version."&n=personalpreffile"; ?>">personal config file</A>)
lists "maximize : 0" as its default value. To set this to 1, we therefore write as follows
<?php codeSampleBegin() ?>
[window_size]
maximize:1
<?php codeSampleEnd() ?>
Sometimes the values in the dictionary are themselves lists. In this case the syntax is a fairly
obvious combination with the "list syntax" described above. For example "run_dependent_text" has this form:
<?php codeSampleBegin() ?>
[run_dependent_text]
stdout:Filter this line
stdout:And lines like this
<?php codeSampleEnd() ?>
Such sections do not need special termination if they are followed by other sections. If they are followed
by ordinary String, Int or List settings though, they must be terminated with [end]. For example,
combining some previous examples :
<?php codeSampleBegin() ?>
[run_dependent_text]
stdout:Filter this line
stdout:And lines like this
# Can also write [end] here too but isn't necessary

[window_size]
maximize:1
[end] 
# But without [end] here the next setting will not be found

copy_test_path:my_data_file1.txt
<?php codeSampleEnd() ?>
TextTest will try to warn you if you forget such an [end] marker.
</div>
<div class="Text_Header">Composite Dictionary Entries in Config Files</div>
<div class="Text_Normal">Entries listed as "CompositeDictionary" are exactly like Dictionary
entries with the added factor that the key "default" has a special meaning. It is basically
a fallback value for if the requested key has not been specifically defined,
and as such is a way to avoid repeating information across several different keys. If the values are
 Strings or Ints, specific settings simply replace the "default" key. For example, "view_program" could
be set as follows:
<?php codeSampleBegin() ?>
[view_program]
html_file:firefox
default:emacs
<?php codeSampleEnd() ?>
which would cause all files to be viewed with "emacs" except "html_file" which would be viewed in firefox.</div>
<div class="Text_Normal">
If the values are lists, the values from the default key will be appended to those from the specific key. For
example:
<?php codeSampleBegin() ?>
[collate_script]
html_file:xmllint
default:my_custom_script.py
<?php codeSampleEnd() ?>
This would cause all files to be fed through "my_custom_script.py" before being compared, except for "html_file"
which would be passed through "xmllint" as well as "my_custom_script.py".
</div>
<div class="Text_Normal">If you only wish to override the "default" value of a CompositeDictionary, 
it is acceptable to use the format for
non-dictionary entries, i.e. simply 
<?php codeSampleBegin() ?>
view_program:emacs

collate_script:my_custom_script.py
<?php codeSampleEnd() ?></div>
<div class="Text_Header"><A NAME="environment"></A>Environment Files</div>
<div class="Text_Normal">These consist of a series of environment variable assignments of the form
"&lt;key&gt;:&lt;value&gt;". It is used to set environment variables to be passed to the system under test
for all tests under a certain point in the hierarchy. So if we wish to set MY_ENV_VAR to 3 for the system under test,
we just write
<?php codeSampleBegin() ?>
MY_ENV_VAR:3
<?php codeSampleEnd() ?>
As with config files, blank lines and lines beginning with '#' will be ignored, and environment variables will be
expanded, both from the external environment and from the variables set by TextTest.</div>
<div class="Text_Normal">
(See <A class="Text_Link" href="<?php print "index.php?page=".$version."&n=about_testsuites"; ?>">the Test Suite Guide</A> 
for a fuller explanation of the purpose of these files)</div>
<div class="Text_Header">Options Files</div>
<div class="Text_Normal">These consist for the most part of options to passed "as is" to the system under test on the command line.
The only complications are for when a file wishes to reset options set in previously read files. In that case a similar
syntax to that in the config file can be used, i.e.
<?php codeSampleBegin() ?>
{CLEAR -a} -b -c
<?php codeSampleEnd() ?>
will append -b and -c to the command line and remove -a if it was previously added, while
<?php codeSampleBegin() ?>
{CLEAR} -b -c
<?php codeSampleEnd() ?>
will ignore everything previously set and also append -b and -c. (See <A class="Text_Link" href="<?php print "index.php?page=".$version."&n=about_testsuites"; ?>">the Test Suite Guide</A> 
for a fuller explanation of the purpose of these files)</div>
<div class="Text_Header"><A NAME="testsuite"></A>Testsuite Files</div>
<div class="Text_Normal">These are auto-generated by the Static GUI and do not ordinarily need to be manipulated directly, but it is easy to do so if you wish. They consist of an ordered series of test names, which should correspond to existing directories which define the tests. Comments above the test names are interpreted as a description of the following test. For example:
<?php codeSampleBegin() ?>
# Our very first test!
FirstTest

# This comment will be ignored

# This time the description
# required several lines
ComplicatedTest
<?php codeSampleEnd() ?>
Their purpose is also explained more fully in <A class="Text_Link" href="<?php print "index.php?page=".$version."&n=about_testsuites"; ?>">the Test Suite Guide</A>.</div>
<div class="Text_Header">Examples</div>
<div class="Text_Normal">The TextTest download includes a test suite for itself. It is
recommended that you look around this (or any other example you
can find) to get an idea of how it works. There is also a quick
guide document included to help you find the simple &ldquo;target
application&rdquo; test suites which are used for testing
itself. These are simple in order to provide minimal tests, so
function as demonstration examples also. 
</div>
<div class="Text_Normal">When writing your own tests it is often best to start with
working files for another application and edit them suitably.
This reduces the risk of typing things wrongly, particularly in
the config file.</div>
